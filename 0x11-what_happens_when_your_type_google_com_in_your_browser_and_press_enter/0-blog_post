Have you ever wondered what occurs when you enter a website address into a browser? Although the procedure appears simple on the surface, it actually involves a complex network of activities that work together like cogs in a wheel to produce the desired search results.
There are a number of series of complex processes which occur behind the scenes when you type a URL like "https://www.google.com" into  browser's address bar and hit Enter. In this blog post, I will dive deep into the fascinating journey of your browser’s request, and a series of complex processes that occur behind the scene in order to retrieve and display the requested web page. I will explore facet of concepts such as DNS, TCP/IP, HHTS/SSL, firewalls, load balancers, databases, webs servers and application servers.
DNS Request
Here's how the DNS lookup process works in more details:
•	The local DNS resolver receives a request from the browser and is often offered by the internet service provider (ISP).
•	To see if it has a current copy of the DNS record for the domain, the local DNS resolver looks in its cache. In that case, it relays the IP address to the browser.
•	The local DNS resolver makes a request to a root nameserver if it does not already have a recent copy of the DNS record.
•	The root nameserver replies with the address of a nameserver for a top-level domain (TLD), such as.com or.org
•	A request is made to the TLD nameserver by the neighborhood DNS resolver.
•	The address of the domain's authoritative nameserver is returned by the TLD nameserver in response.
•	A request is made to the authoritative nameserver by the local DNS resolver.
•	When contacted, the domain's IP address is returned by the authoritative nameserver.
•	The IP address is sent back to the browser by the neighborhood DNS resolver.
•	The webpage is retrieved by the browser by making a request to the server at the specified IP address. 
TCP/IP:
TCP/IP (Transmission Control Protocol/Internet Protocol) is a set of rules that regulate how data is transmitted over the internet; it breaks down data into packets and ensures that they are sent and received in the right order. Once your computer knows the IP address of Google's server, it can establish a connection using this stack.
Firewall:
Your machine might need to go via a firewall before it can connect to Google's server. A firewall is a safety precaution that keeps track of and manages network traffic coming into and going out of a network. It can stop unauthorized users from accessing your network or machine.
HTTPS/SSL
Basically, browser negotiates a secure connection with the server using SSL (Secure Socket Layer) or TLS (Transport Layer Security) encryption if the website is utilizing HTTPS (Hypertext Transfer Protocol Secure). Data transmission between the browser and the server is secured and protected from eavesdroppers thanks to SSL/TLS. To create a secure connection, the browser and server exchange keys, and the browser uses the server's SSL/TLS certificate to confirm the server's identity.
Load-balancer
The load balancer might be useful when websites are frequently overloaded with traffic. To prevent a server from becoming overwhelmed, a load-balancer divides incoming requests among several servers. To maintain effectiveness even during periods of high traffic, requests are routed to servers with the lowest load.
Web server
When a client (such as a browser seeking to reach google.com) requests a web page, a web server is a computer program that responds to those requests. A web server receives a request for a web page from a client and processes it before sending the client the proper response.
The load balancer will send a request to Google's server when attempting to access google.com, in other words. The request would then be processed by the web server, which would then produce a response. Usually, this response would contain the HTML, CSS, and JavaScript files that make up the web page. After that, the load balancer would transmit this response to the browser on behalf of the web server. 
Application server
One application server may be used for simpler web applications and another for more complicated ones. The business functionality of the application, including handling user input and working with databases, is handled by the application server. For the purpose of producing dynamic content that is returned to the browser, it talks with the web server.
Database
If a website needs information from a database, the application server will get in touch with the database server to retrieve the information and provide it back to the browser.
In conclusion, there are a number of steps involved in a URL's journey from the time it is entered into the browser until the web page is displayed on the screen, including DNS resolution, TCP/IP connection, firewall checks, SSL/TLS encryption, load balancing, web server processing, application server processing, and database communication. Any software engineer must comprehend this procedure, and it’s a good way to impress your interviewer during an interview.
